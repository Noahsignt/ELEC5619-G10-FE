import React from 'react';
import TopAppBar from '../components/AppBar';
import Accordion from '@mui/material/Accordion';
import AccordionSummary from '@mui/material/AccordionSummary';
import AccordionDetails from '@mui/material/AccordionDetails';
import Typography from '@mui/material/Typography';
import ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';
import Box from '@mui/material/Box';
import Paper from '@mui/material/Paper';
import Grid from '@mui/material/Grid';

const testObj = [
    {
        type: "notes", 
        completed: true, 
        title: "A brief history on English literature", 
        description: "Join me as I take you on a journey from the inception of classical literature as we know it all the way through to the contemporary mind-bending stuff of today",
        id: 0
    },
    {
        type: "quiz", 
        completed: true, 
        title: "Do you know your themes?", 
        description: "Take this quiz that tests your knowledge on literary themes.",
        id: 1
    },
    {
        type: "exercise", 
        completed: false, 
        title: "Match the movements", 
        description: "Try and match the literary movement with the associated time period.",
        id: 2
    },
    {
        type: "flashcards", 
        completed: false, 
        title: "Literary Flashcards", 
        description: "Practice your literary knowledge with these flashcards!",
        id: 3
    }
]

const lightenColour = (hex, amount = 0.4) => {
    hex = hex.replace('#', '');
    let r = parseInt(hex.substring(0, 2), 16);
    let g = parseInt(hex.substring(2, 4), 16);
    let b = parseInt(hex.substring(4, 6), 16);
    r = Math.min(255, Math.floor(r + (255 - r) * amount));
    g = Math.min(255, Math.floor(g + (255 - g) * amount));
    b = Math.min(255, Math.floor(b + (255 - b) * amount));
    r = r.toString(16).padStart(2, '0');
    g = g.toString(16).padStart(2, '0');
    b = b.toString(16).padStart(2, '0');

    // Return the lightened color
    return `#${r}${g}${b}`;
};

/* 
represents a task as part of a week's content
params:
    type: string that can be notes, quiz, exercise or flashcards
    completed: boolean 
    title: string generated by AI as a title for the task
    description: string generated by AI describing the task to be completed
    id: number (TODO: randomly generate and sync up with the db so that tasks can be correctly completed)
*/
const TaskAccordion = ({type, completed, title, description, id }) => {
    const colour =  completed ? '#95bb72' : '#ffa652';

    return (
    <Accordion sx={{backgroundColor: colour}}>
        <AccordionSummary
          expandIcon={<ArrowDownwardIcon />}
          id={id}
        >
          <Typography><strong>{type.charAt(0).toUpperCase() + type.slice(1)}: </strong>{title}</Typography>
        </AccordionSummary>
        <AccordionDetails sx={{backgroundColor: lightenColour(colour)}}>
          <Typography>
            {description}
          </Typography>
        </AccordionDetails>
    </Accordion>
    )
}

export default function Week() {
    return (
        <main>
            <TopAppBar />
            <Box sx={{ 
                flexGrow: 1, 
                display: 'flex', 
                flexDirection: 'column',
                alignItems: 'center',
                paddingTop: '64px'
                }}>
                <Typography variant='h3'>
                    Shakespeare
                </Typography>
                <Typography variant='h4'>
                    Week One
                </Typography>
                <Grid container spacing={2} sx={{padding: '64px 64px 0 64px'}}>
                    {testObj.map((e) => {
                        return (
                            <Grid item xs={4}>
                                <TaskAccordion type={e.type} completed={e.completed} title={e.title} description={e.description} id={e.id} />
                            </Grid>
                        )
                    })}
                </Grid>
            </Box>
        </main>
    );
}